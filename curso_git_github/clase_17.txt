-- RESOLUCION DE CONFLICO AL HACER UN MERGE --

Git nunca borra nada, a menos que nosotros se lo indiquemos.
Cuando usamos los comandos git merge o git checkout estamos
cambiando de rama o creando un nuevo commit, no borrando ramas
ni commits (recuerda que puedes borrar commits con git reset y
ramas con git branch -d).

Git es muy inteligente y puede resolver algunos conflictos
automáticamente: cambios, nuevas líneas, entre otros. Pero
algunas veces no sabe cómo resolver estas diferencias, por ejemplo,
cuando dos ramas diferentes hacen cambios distintos a una misma línea.

Esto lo conocemos como conflicto y lo podemos resolver manualmente.
Solo debemos hacer el merge, ir a nuestro editor de código y elegir
si queremos quedarnos con alguna de estas dos versiones o algo diferente.
Algunos editores de código como Visual Studio Code nos ayudan a resolver estos
conflictos sin necesidad de borrar o escribir líneas de texto, basta con hacer
clic en un botón y guardar el archivo.

Recuerda que siempre debemos crear un nuevo commit para aplicar los cambios del merge.
Si Git puede resolver el conflicto, hará commit automáticamente. Pero, en caso de no
pueda resolverlo, debemos solucionarlo y hacer el commit.

Los archivos con conflictos por el comando git merge entran en un nuevo estado
que conocemos como Unmerged. Funcionan muy parecido a los archivos en estado
Unstaged, algo así como un estado intermedio entre Untracked y Unstaged.
Solo debemos ejecutar git add para pasarlos al área de staging y git commit
para aplicar los cambios en el repositorio.


-- Cómo revertir un merge --

Si nos hemos equivocado y queremos cancelar el merge, debemos usar el siguiente comando:

    * git merge --abort




-- COMANDOS PARA CORREGIR CONFLICTOS EN REPOSITORIOS REMOTOS --

    * git clone <url>: se utiliza para copiar el repositorio remoto al directorio de trabajo local
    * git push: se utiliza para enviar cambios al repositorio remoto
    * git fetch: se utiliza para actualizar el repositorio local
    * git merge: este comando sirve para fusionar los datos traidos desde el servidor con los datos locales
    * git pull: trae los datos y los fusiona a la vez, en un solo comando.
    * git commit -am "": crea commits rápidamente.
    * git branch <nombre>: crea un nuevo branch, hay que tener en cuenta que el branch
        que creemos a partir de este comando partirá desde el branch donde ejecutemos el comando
    * git checkout <branch>: este comando se usa para saltar de un branch a otro
    
